#include <iostream>
#include <sstream>
#include <cctype>
#include <cstdint>
#include <locale>
#include <algorithm>
#include <cmath>
#include <numeric>
#include <climits>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <tuple>
#include <stack>
#include <queue>
#include <list>
#include <utility>
#include <iomanip>
using namespace std;

#define MAX		(16 + 1)

#define horizontal	(0)
#define vertical	(1)
#define diagonal	(2)

int m, n, t, k, v;
int arr[MAX][MAX];

void setup() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout << fixed;
	cout << setprecision(10);
}

struct Pos {
	int y, x, type;

	Pos(int y, int x, int type) : y(y), x(x), type(type) {}
};

inline bool in_range_not_wall(int y, int x) {
	return 0 <= y && y < n && 0 <= x && x < n
				&& arr[y][x] != 1;
}

bool is_valid_pos(Pos *p) {
	int y = p->y, x = p->x;

	switch (p->type) {
		case horizontal:
			return in_range_not_wall(y, x)
						&& in_range_not_wall(y, x - 1);
		case vertical:
			return in_range_not_wall(y, x)
						&& in_range_not_wall(y - 1, x);
		case diagonal:
			return in_range_not_wall(y, x)
						&& in_range_not_wall(y, x - 1)
						&& in_range_not_wall(y - 1, x)
						&& in_range_not_wall(y - 1, x - 1);
		default:
			return false;
	}
}

int gen_neighbors(Pos *p, vector<Pos *>& vec) {
	int y = p->y, x = p->x;

	switch (p->type) {
		case horizontal:
			vec.emplace_back(new Pos(y, x + 1, horizontal));
			vec.emplace_back(new Pos(y + 1, x + 1, diagonal));
			break;
		case vertical:
			vec.emplace_back(new Pos(y + 1, x, vertical));
			vec.emplace_back(new Pos(y + 1, x + 1, diagonal));
			break;
		case diagonal:
			vec.emplace_back(new Pos(y, x + 1, horizontal));
			vec.emplace_back(new Pos(y + 1, x, vertical));
			vec.emplace_back(new Pos(y + 1, x + 1, diagonal));
			break;
		default:
			break;
	}

	return vec.size();
}

int search() {
	queue<Pos *> qu;
	int cnt = 0;

	qu.push(new Pos(0, 1, horizontal));
	while (!qu.empty()) {
		Pos *u = qu.front();
		vector<Pos *> vec;

		qu.pop();
		if (u->y == n - 1 && u->x == n - 1) {
			cnt++;
			continue;
		}

		gen_neighbors(u, vec);
		for (Pos *w : vec) {
			if (is_valid_pos(w)) {
				qu.push(w);
			}
		}
	}

	return cnt;
}

int main() {
	setup();
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
		}
	}

	cout << search() << "\n";

	return 0;
}
